
README file for Programming Assignment 1
========================================

Your directory should now contain the following files:

 build.xml -> [course dir]/assignments/PA1/build.xml
 run
 README
 atoi.cl -> [course dir]/assignments/PA1/atoi.cl
 stack.cl
 stack.test -> [course dir]/assignments/PA1/stack.test

	The build.xml contains targets for compiling and testing your
	program.

        The run is a script to run a compiled file.

	The README contains this info. Part of the assignment is to
	answer the questions at the end of this README file.
	Just edit this file.

	atoi.cl is an implementation in Cool of the string to integer
	conversion function known from the C language.

	stack.cl is the skeleton file which you should fill in with
	your program.

	stack.test is a short test input to the stack machine. It is
	run through your program when you hand it in, and the output
	is also	handed in.


        The symlinked files (see "man ln") are that way to emphasize
        that they are read-only -- when we test your program, we already
        have our own versions.


Instructions
------------

	To compile and test your program, type:

	% ant test

        Try it now -- it should work, and print "Nothing implemented"
        (among a few other things).


        To simply compile your program, type
        % ant compile

        And to run the program, type
        % ./run


	Instructions for turning in the assignment are given in the handout.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Questions on PA1
----------------

1. Describe your implementation of the stack machine in a single short
   paragraph.

   As suggested in the instructions, I created a generic StackCommand class
   which has the name (e.g. "s", "+", or "42"), and a method that manipulates
   the stack to perform its action. For example, PlusCommand, which extends
   StackCommand and has a name of "+" pops itself off along with the top two
   StackCommands in the stack, and then pushes the sum onto the stack. The atoi
   functions were copied from the example class.

2. List 3 things that you like about the Cool programming language.

   1. Because it's statically typed, the compiler messages are usually quite
      useful.
   2. It's useful that it's object oriented
   3. It's garbage collected

3. List 3 things you DON'T like about Cool.
   1. "void" is not an expr!!!!
   2. Brackets/Semicolons for groups of expressions vs. single expressions not
      the same
   3. NO ARRAYS!!!
